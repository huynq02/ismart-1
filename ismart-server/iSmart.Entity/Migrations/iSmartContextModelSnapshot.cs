// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iSmart.Entity.Models;

#nullable disable

namespace iSmart.Entity.Migrations
{
    [DbContext(typeof(iSmartContext))]
    partial class iSmartContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ActionType", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ActionId");

                    b.ToTable("ActionType", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.AvailableForReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Available")
                        .HasColumnType("int");

                    b.Property<int?>("ExportId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExportId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("ImportId");

                    b.ToTable("AvailableForReturns");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"), 1L, 1);

                    b.Property<string>("BillCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Canceled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("BillId");

                    b.HasIndex("CreatedId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.BillDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"), 1L, 1);

                    b.Property<int>("ActualStock")
                        .HasColumnType("int");

                    b.Property<int>("AmountDifferential")
                        .HasColumnType("int");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("DetailId")
                        .HasName("PK_StocktakeNoteDetail");

                    b.HasIndex("BillId");

                    b.HasIndex("GoodsId");

                    b.ToTable("BillDetail", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveyId"), 1L, 1);

                    b.Property<string>("DeliveryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("DeliveyId");

                    b.HasIndex("StatusId");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.EmailToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"), 1L, 1);

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailToken", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.ExportOrder", b =>
                {
                    b.Property<int>("ExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportId"), 1L, 1);

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ExportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExportedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseDestinationId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("ExportId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ExportOrder", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.ExportOrderDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"), 1L, 1);

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<int?>("GoodsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ImportOrderDetailId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("ExportId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("ImportOrderDetailId");

                    b.ToTable("ExportOrderDetail", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("featureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"), 1L, 1);

                    b.Property<string>("Featurename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("featurename");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Good", b =>
                {
                    b.Property<int>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoodsId"), 1L, 1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GoodsCode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxStock")
                        .HasColumnType("int");

                    b.Property<string>("MeasuredUnit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MinStock")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float>("StockPrice")
                        .HasColumnType("real");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("WarrantyTime")
                        .HasColumnType("int");

                    b.HasKey("GoodsId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("iSmart.Entity.Models.GoodsHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"), 1L, 1);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<float?>("CostPrice")
                        .HasColumnType("real");

                    b.Property<string>("CostPriceDifferential")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QuantityDifferential")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("ActionId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("UserId");

                    b.ToTable("GoodsHistory", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.GoodsWarehouse", b =>
                {
                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("GoodsId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("GoodsWarehouses");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ImportOrder", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ImportedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float>("TotalCost")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseDestinationId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("ImportId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ImportOrder", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.ImportOrderDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"), 1L, 1);

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BatchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("CostPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("ImportId");

                    b.ToTable("ImportOrderDetail", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.InventoryCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryChecks");
                });

            modelBuilder.Entity("iSmart.Entity.Models.InventoryCheckDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ExpectedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryCheckId")
                        .HasColumnType("int");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("InventoryCheckId");

                    b.ToTable("InventoryCheckDetails");
                });

            modelBuilder.Entity("iSmart.Entity.Models.MeasuredUnit", b =>
                {
                    b.Property<int>("MeasuredUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasuredUnitId"), 1L, 1);

                    b.Property<string>("MeasuredUnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MeasuredUnitId");

                    b.ToTable("MeasuredUnit", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRevoked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("nvarchar(44)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.ReturnsOrder", b =>
                {
                    b.Property<int>("ReturnOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnOrderId"), 1L, 1);

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("ReturnOrderCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReturnedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("ReturnOrderId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ReturnOrder", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.ReturnsOrderDetail", b =>
                {
                    b.Property<int>("ReturnOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnOrderDetailId"), 1L, 1);

                    b.Property<string>("BatchCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ReturnOrderId")
                        .HasColumnType("int");

                    b.HasKey("ReturnOrderDetailId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("ReturnOrderId");

                    b.ToTable("ReturnOrderDetail", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("SupplierId");

                    b.HasIndex("StatusId");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("UserCode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.UserWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "UserId", "WarehouseId" }, "UQ__User_War__95E846B211E0D37C")
                        .IsUnique();

                    b.ToTable("User_Warehouse", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"), 1L, 1);

                    b.Property<string>("WarehouseAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WarehousePhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("RoleFeature", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int")
                        .HasColumnName("featureId");

                    b.HasKey("RoleId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("RoleFeature", (string)null);
                });

            modelBuilder.Entity("iSmart.Entity.Models.AvailableForReturn", b =>
                {
                    b.HasOne("iSmart.Entity.Models.ExportOrder", "Export")
                        .WithMany("AvailableForReturns")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.Good", "Goods")
                        .WithMany("AvailableForReturns")
                        .HasForeignKey("GoodsId")
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.ImportOrder", "Import")
                        .WithMany("AvailableForReturns")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Export");

                    b.Navigation("Goods");

                    b.Navigation("Import");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Bill", b =>
                {
                    b.HasOne("iSmart.Entity.Models.User", "CreatedNavigation")
                        .WithMany("BillCreatedNavigations")
                        .HasForeignKey("CreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StocktakeNote_User_CreatedId");

                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("Bills")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_StocktakeNote_Status");

                    b.HasOne("iSmart.Entity.Models.User", "UpdatedNavigation")
                        .WithMany("BillUpdatedNavigations")
                        .HasForeignKey("UpdatedId")
                        .HasConstraintName("FK_StocktakeNote_User_UpdatedId");

                    b.HasOne("iSmart.Entity.Models.Warehouse", "Warehouse")
                        .WithMany("Bills")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_StocktakeNote_Storage_StorageId");

                    b.Navigation("CreatedNavigation");

                    b.Navigation("Status");

                    b.Navigation("UpdatedNavigation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("iSmart.Entity.Models.BillDetail", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StocktakeNoteDetail_StocktakeNote_StocktakeId");

                    b.HasOne("iSmart.Entity.Models.Good", "Goods")
                        .WithMany("BillDetails")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StocktakeNoteDetail_Goods_GoodsId");

                    b.Navigation("Bill");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Delivery", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("Deliveries")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Delivery_Status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("iSmart.Entity.Models.EmailToken", b =>
                {
                    b.HasOne("iSmart.Entity.Models.User", "User")
                        .WithMany("EmailTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ExportOrder", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithMany("ExportOrders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_ExportOrder_Customer_CustomerId");

                    b.HasOne("iSmart.Entity.Models.Delivery", "Delivery")
                        .WithMany("ExportOrders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ExportOrder_Delivery");

                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("ExportOrders")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ExportOrder_Status");

                    b.HasOne("iSmart.Entity.Models.User", "User")
                        .WithMany("ExportOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.Warehouse", "Warehouse")
                        .WithMany("ExportOrders")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_ExportOrder_Storage_StorageId");

                    b.Navigation("Customer");

                    b.Navigation("Delivery");

                    b.Navigation("Status");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ExportOrderDetail", b =>
                {
                    b.HasOne("iSmart.Entity.Models.ExportOrder", "Export")
                        .WithMany("ExportOrderDetails")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.Good", "Goods")
                        .WithMany("ExportOrderDetails")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ExportOrderDetail_Goods");

                    b.HasOne("iSmart.Entity.Models.ImportOrderDetail", "ImportOrderDetail")
                        .WithMany()
                        .HasForeignKey("ImportOrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_ExportOrderDetail_ImportOrderDetail");

                    b.Navigation("Export");

                    b.Navigation("Goods");

                    b.Navigation("ImportOrderDetail");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Good", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("Goods")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Goods_Status");

                    b.HasOne("iSmart.Entity.Models.Supplier", "Supplier")
                        .WithMany("Goods")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("iSmart.Entity.Models.GoodsHistory", b =>
                {
                    b.HasOne("iSmart.Entity.Models.ActionType", "Action")
                        .WithMany("GoodsHistories")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.Good", "Goods")
                        .WithMany("GoodsHistories")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.User", "User")
                        .WithMany("GoodsHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Goods");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iSmart.Entity.Models.GoodsWarehouse", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Good", "Good")
                        .WithMany("GoodsWarehouses")
                        .HasForeignKey("GoodsId")
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.Warehouse", "Warehouse")
                        .WithMany("GoodsWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ImportOrder", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Delivery", "Delivery")
                        .WithMany("ImportOrders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ImportOrder_Delivery");

                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("ImportOrders")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ImportOrder_Status");

                    b.HasOne("iSmart.Entity.Models.Supplier", "Supplier")
                        .WithMany("ImportOrders")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.User", "User")
                        .WithMany("ImportOrders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ImportOrder_User");

                    b.HasOne("iSmart.Entity.Models.Warehouse", "Warehouse")
                        .WithMany("ImportOrders")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_ImportOrder_Storage_StorageId");

                    b.Navigation("Delivery");

                    b.Navigation("Status");

                    b.Navigation("Supplier");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ImportOrderDetail", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Good", "Goods")
                        .WithMany("ImportOrderDetails")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ImportOrderDetail_Goods");

                    b.HasOne("iSmart.Entity.Models.ImportOrder", "Import")
                        .WithMany("ImportOrderDetails")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Import");
                });

            modelBuilder.Entity("iSmart.Entity.Models.InventoryCheck", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("InventoryChecks")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_InventoryCheck_Status");

                    b.HasOne("iSmart.Entity.Models.Warehouse", "Warehouse")
                        .WithMany("InventoryChecks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("iSmart.Entity.Models.InventoryCheckDetail", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Good", "Good")
                        .WithMany("InventoryCheckDetails")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.InventoryCheck", "InventoryCheck")
                        .WithMany("InventoryCheckDetails")
                        .HasForeignKey("InventoryCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("InventoryCheck");
                });

            modelBuilder.Entity("iSmart.Entity.Models.RefreshToken", b =>
                {
                    b.HasOne("iSmart.Entity.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ReturnsOrder", b =>
                {
                    b.HasOne("iSmart.Entity.Models.User", "ApprovedByUser")
                        .WithMany("ApprovedReturnOrders")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ReturnOrder_ApprovedByUser");

                    b.HasOne("iSmart.Entity.Models.User", "User")
                        .WithMany("CreatedReturnOrders")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ReturnOrder_CreatedByUser");

                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnOrder_Status");

                    b.HasOne("iSmart.Entity.Models.Supplier", "Supplier")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReturnOrder_Supplier");

                    b.HasOne("iSmart.Entity.Models.Warehouse", "Warehouse")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReturnOrder_Warehouse");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Status");

                    b.Navigation("Supplier");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ReturnsOrderDetail", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Good", "Goods")
                        .WithMany("ReturnsOrderDetails")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReturnOrderDetail_Goods");

                    b.HasOne("iSmart.Entity.Models.ReturnsOrder", "ReturnOrder")
                        .WithMany("ReturnsOrderDetails")
                        .HasForeignKey("ReturnOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ReturnOrderDetail_ReturnOrder");

                    b.Navigation("Goods");

                    b.Navigation("ReturnOrder");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Supplier", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("Suppliers")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Supplier_Status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("iSmart.Entity.Models.User", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSmart.Entity.Models.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Status");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("iSmart.Entity.Models.UserWarehouse", b =>
                {
                    b.HasOne("iSmart.Entity.Models.User", "User")
                        .WithMany("UserWarehouses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__User_Ware__UserI__68487DD7");

                    b.HasOne("iSmart.Entity.Models.Warehouse", "Warehouse")
                        .WithMany("UserWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK__User_Ware__Wareh__693CA210");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RoleFeature", b =>
                {
                    b.HasOne("iSmart.Entity.Models.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleFeature_Features");

                    b.HasOne("iSmart.Entity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleFeature_Role");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Navigation("ExportOrders");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ActionType", b =>
                {
                    b.Navigation("GoodsHistories");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Bill", b =>
                {
                    b.Navigation("BillDetails");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Category", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Delivery", b =>
                {
                    b.Navigation("ExportOrders");

                    b.Navigation("ImportOrders");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ExportOrder", b =>
                {
                    b.Navigation("AvailableForReturns");

                    b.Navigation("ExportOrderDetails");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Good", b =>
                {
                    b.Navigation("AvailableForReturns");

                    b.Navigation("BillDetails");

                    b.Navigation("ExportOrderDetails");

                    b.Navigation("GoodsHistories");

                    b.Navigation("GoodsWarehouses");

                    b.Navigation("ImportOrderDetails");

                    b.Navigation("InventoryCheckDetails");

                    b.Navigation("ReturnsOrderDetails");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ImportOrder", b =>
                {
                    b.Navigation("AvailableForReturns");

                    b.Navigation("ImportOrderDetails");
                });

            modelBuilder.Entity("iSmart.Entity.Models.InventoryCheck", b =>
                {
                    b.Navigation("InventoryCheckDetails");
                });

            modelBuilder.Entity("iSmart.Entity.Models.ReturnsOrder", b =>
                {
                    b.Navigation("ReturnsOrderDetails");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Status", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Deliveries");

                    b.Navigation("ExportOrders");

                    b.Navigation("Goods");

                    b.Navigation("ImportOrders");

                    b.Navigation("InventoryChecks");

                    b.Navigation("ReturnsOrders");

                    b.Navigation("Suppliers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Supplier", b =>
                {
                    b.Navigation("Goods");

                    b.Navigation("ImportOrders");

                    b.Navigation("ReturnsOrders");
                });

            modelBuilder.Entity("iSmart.Entity.Models.User", b =>
                {
                    b.Navigation("ApprovedReturnOrders");

                    b.Navigation("BillCreatedNavigations");

                    b.Navigation("BillUpdatedNavigations");

                    b.Navigation("CreatedReturnOrders");

                    b.Navigation("EmailTokens");

                    b.Navigation("ExportOrders");

                    b.Navigation("GoodsHistories");

                    b.Navigation("ImportOrders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserWarehouses");
                });

            modelBuilder.Entity("iSmart.Entity.Models.Warehouse", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("ExportOrders");

                    b.Navigation("GoodsWarehouses");

                    b.Navigation("ImportOrders");

                    b.Navigation("InventoryChecks");

                    b.Navigation("ReturnsOrders");

                    b.Navigation("UserWarehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
